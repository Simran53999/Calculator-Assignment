{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","calcBtns","forEach","item","push","onClick","e","target","value","className","substr","length","String","eval","includes","toFixed","console","log","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"shCAMA,SAASA,MAAM,cAGaC,oDAAS,IAHtB,wLAGNC,MAHM,cAGCC,SAHD,cAIPC,SAAW,GAgBjB,MAfA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,KAAM,KAAKC,SAAQ,SAACC,GAChDF,SAASG,KACP,sEACEC,QAAS,SAACC,GACRN,SAASD,MAAQO,EAAEC,OAAOC,QAE5BA,MAAOL,EAJT,UAOG,IACAA,IAHIA,OAST,mEAAKM,UAAU,UAAf,UACG,IACD,kEAAKA,UAAU,aAAf,SAA6BV,QAC7B,kEAAKU,UAAU,cAAf,SAA8BR,WAC9B,mEAAKQ,UAAU,oBAAf,UAGE,qEAAQJ,QAAS,kBAAML,SAASD,MAAMW,OAAO,EAAGX,MAAMY,OAAS,KAA/D,mBAKA,qEAAQN,QAAS,kBAAML,SAAS,KAAKQ,MAAM,GAA3C,gBAGA,qEAAQH,QAAS,SAACC,GAAD,OAAON,SAASD,MAAQO,EAAEC,OAAOC,QAAQA,MAAM,IAAhE,kBAIF,mEAAKC,UAAU,qBAAf,UAGE,sEAAQJ,QAAS,SAACC,GAAD,OAAON,SAASD,MAAQO,EAAEC,OAAOC,QAAQA,MAAM,IAAhE,UACG,IADH,UAKA,sEAAQH,QAAS,SAACC,GAAD,OAAON,SAASD,MAAQO,EAAEC,OAAOC,QAAQA,MAAM,IAAhE,UACG,IADH,OAMA,sEAAQH,QAAS,SAACC,GAAD,OAAON,SAASD,MAAQO,EAAEC,OAAOC,QAAQA,MAAM,IAAhE,UACG,IADH,IAEI,OAGJ,qEAAQH,QAAS,SAACC,GAAD,OAAON,SAASD,MAAQO,EAAEC,OAAOC,QAAQA,MAAM,IAAhE,eAMA,qEACEH,QAAS,iBAACC,GACR,IACEN,SACEY,OAAOC,KAAKd,QAAQY,OAAS,GAC3BC,OAAOC,KAAKd,QAAQe,SAAS,KAC3BF,OAAOC,KAAKd,OAAOgB,QAAQ,IAC3BH,OAAOC,KAAKd,SAElB,MAAOO,GACPU,QAAQC,IAAIX,KAGhBE,MAAM,IAbR,qBAsBR,IAAMU,YAAcC,SAASC,eAAe,QAC5CC,iDAASC,OAAO,2DAACzB,IAAD,IAASqB,aACVrB,2B,wICnFA0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdH,IAASC,OACP,cAAC,IAAMU,WAAP,UACE,cAACnC,EAAA,EAAD,MAEFsB,SAASC,eAAe,SAM1BG,M","file":"static/js/main.386fd584.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\"; //for rendering\n\nimport \"./App.css\";\n\n\nfunction App() {\n  /* eslint no-eval: 0 */\n\n  const [input, setInput] = useState(\"\");\n  const calcBtns = [];\n  [7, 8, 9, 4, 5, 6, 1, 2, 3, 0,\"00\", \".\"].forEach((item) => {\n    calcBtns.push(\n      <button\n        onClick={(e) => {\n          setInput(input + e.target.value);\n        }}\n        value={item}\n        key={item}\n      >\n        {\" \"}\n        {item}\n      </button>\n    );\n  });\n\n  return (\n    <div className=\"wrapper\">\n      {\" \"}\n      <div className=\"show-input\">{input}</div>\n      <div className=\"digits flex\">{calcBtns}</div>\n      <div className=\"modifiers subgrid\">\n        {/* clear button */}\n\n        <button onClick={() => setInput(input.substr(0, input.length - 1))}>\n          Clear\n        </button>\n\n        {/* clear all */}\n        <button onClick={() => setInput(\"\")} value=\"\">\n          AC\n        </button>\n        <button onClick={(e) => setInput(input + e.target.value)} value=\"%\">\n         %\n        </button>\n      </div>\n      <div className=\"operations subgrid\">\n        {/* add button */}\n\n        <button onClick={(e) => setInput(input + e.target.value)} value=\"/\">\n          {\" \"}\n          รท\n        </button>\n\n        <button onClick={(e) => setInput(input + e.target.value)} value=\"*\">\n          {\" \"}\n          *\n        </button>\n\n                {/* minus btn */}\n        <button onClick={(e) => setInput(input + e.target.value)} value=\"-\">\n          {\" \"}\n          -{\" \"}\n        </button>\n\n        <button onClick={(e) => setInput(input + e.target.value)} value=\"+\">\n          +\n        </button>\n\n\n        {/* \"=\" btn */}\n        <button\n          onClick={(e) => {\n            try {\n              setInput(\n                String(eval(input)).length > 3 &&\n                  String(eval(input)).includes(\".\")\n                  ? String(eval(input).toFixed(4))\n                  : String(eval(input))\n              );\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n          value=\"=\"\n        >\n          =\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}